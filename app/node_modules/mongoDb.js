/**
    ************************************************
    * HOW TO GET MONGODB UP AND RUNNING ON WINDOWS *
    ************************************************

    Step 1: Download MongoDB for Windows here- https://www.mongodb.com/download-center

    Step 2: Make a data directory for mongoDB anywhere you like.In this case, C: \data

    Step 3: Inside the 'data' directory created above, create two directories called 'db' and 'log':
            1) C:\data\db
            2) C: \data\log

    Step 4: Create a file called 'mongod.cfg' with the following content, or see https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/#create-a-configuration-file:

            systemLog:
                destination: file
                path: c:\data\log\mongod.log
            storage:
                dbPath: c: \data\db


    Step 5: Place that 'mongod.cfg' file above in C:\Program Files\MongoDB\Server\3.2\

    Step 6: Run your Command Prompt as an Administrator(IMPORTANT!).
            See https://technet.microsoft.com/en-us/library/cc947813(v=ws.10).aspx#Anchor_0

    Step 7: In the command prompt, run the following command:

            "C:\Program Files\MongoDB\Server\3.2\bin\mongod.exe" --config "C:\Program Files\MongoDB\Server\3.2\mongod.cfg" --install


    Step 8: Now type 'net start MongoDB' in command prompt to start your mongoDB!
            To stop, 'net stop MongoDB'.


    more info: https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/
*/


// Bring Mongoose into the app
const mongoose = require('mongoose');
// Bring Logger into the app
const logger = require('logger.js');
// Promisify mongoose queries
mongoose.Promise = global.Promise;

const opts = {
    server: {
        socketOptions: { keepAlive: 1 },
    },
};

const bindEventsToDb = (function bindEventsToDb() {
    // Reuse this db in other files
    var db;

    const runInTestMode = 'mode_test';
    // Build the connection string.
    // TODO: in production, URI should come from an env variable instead of hard- coded
    const dbURI = 'mongodb://localhost/storeup';
    const testDbURI = 'mongodb://localhost/test';

    const gracefulExit = function gracefulExit() {
        mongoose.connection.close(() => {
            logger.info('Mongoose default connection disconnected through app termination');
            process.exit(0);
        });
    };

    const connect = function connect(mode) {
        if (db) return true;

        const dbConnectUri = mode === runInTestMode ? testDbURI : dbURI;
        // Create the default database connection pool
        mongoose.connect(dbConnectUri, opts);

        db = mongoose.connection;
        // CONNECTION EVENTS
        // When successfully connected
        db.on('connected', () => {
            logger.info(`Mongoose default connection open to: ${dbURI}`);
        });

        // If the connection throws an error
        db.on('error', (err) => {
            logger.info(`Mongoose default connection error: ${err}`);
        });

        // When the connection is disconnected
        db.on('disconnected', () => {
            logger.info('Mongoose default connection disconnected');
        });

        // // Exit cleanly on Ctrl+C. If the Node process ends, close the Mongoose connection
        process.on('SIGINT', gracefulExit).on('SIGTERM', gracefulExit);
    };


    const getDb = function getDb() {
        return db;
    };

    const getConnectionString = function getConnectionString() {
        return dbURI;
    };

    return {
        connect,
        getDb,
        getConnectionString,
    };
}());

module.exports = bindEventsToDb;

